{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import geopandas as gp\n",
    "from shapely.geometry import Point\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/rh/anaconda/root/envs/PUI2016_Python3/lib/python3.5/site-packages/IPython/core/interactiveshell.py:2717: DtypeWarning: Columns (17,20,25) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv(\"tx_stops_2010_2015.csv\", encoding=\"ISO-8859-1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'id', 'state', 'stop_date', 'stop_time', 'location_raw',\n",
       "       'county_name', 'county_fips', 'fine_grained_location',\n",
       "       'police_department', 'driver_gender', 'driver_age_raw', 'driver_age',\n",
       "       'driver_race_raw', 'driver_race', 'violation_raw', 'violation',\n",
       "       'search_conducted', 'search_type_raw', 'search_type',\n",
       "       'contraband_found', 'stop_outcome', 'is_arrested', 'lat', 'lon',\n",
       "       'officer_id', 'driver_race_original'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[df.county_name == 'Harris County']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Baseline Stats: Harris County"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.26272103934 11.1659343294\n"
     ]
    }
   ],
   "source": [
    "print(100*df.search_conducted.dropna().astype(int).mean(), 100*df.search_conducted.dropna().astype(int).std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.462650532842 6.78610152879\n"
     ]
    }
   ],
   "source": [
    "print(100*df.contraband_found.dropna().astype(int).mean(), 100*df.contraband_found.dropna().astype(int).std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48.689323716294965"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.stop_outcome=='Citation'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "64.9731009175636"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_gender=='M'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36.45357878670886"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race=='White'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24.382006660725175"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race=='Black'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30.82587940695732"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race=='Hispanic'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.878277592757634"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race=='Asian'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2500478085636864"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race=='Other'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.2102097442873276"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race.isnull()])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Stats on Searches and Contraband Recovered, % Citations by Race"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.04439934663 10.1661294397\n",
      "0.388061179033 6.2173876427\n",
      "43.30198950806691\n"
     ]
    }
   ],
   "source": [
    "df1 = df[df.driver_race == 'White']\n",
    "print(100*df1.search_conducted.dropna().astype(int).mean(), 100*df1.search_conducted.dropna().astype(int).std())\n",
    "print(100*df1.contraband_found.dropna().astype(int).mean(), 100*df1.contraband_found.dropna().astype(int).std())\n",
    "print(100*len(df1[df1.stop_outcome=='Citation'])/len(df1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.81468324452 13.3483289779\n",
      "0.648312611012 8.02570278933\n",
      "46.80202444727262\n"
     ]
    }
   ],
   "source": [
    "df2 = df[df.driver_race == 'Black']\n",
    "print(100*df2.search_conducted.dropna().astype(int).mean(), 100*df2.search_conducted.dropna().astype(int).std())\n",
    "print(100*df2.contraband_found.dropna().astype(int).mean(), 100*df2.contraband_found.dropna().astype(int).std())\n",
    "print(100*len(df2[df2.stop_outcome=='Citation'])/len(df2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.2210398155 10.9824612611\n",
      "0.443700391018 6.64632877701\n",
      "17.750147033884545\n"
     ]
    }
   ],
   "source": [
    "df3 = df[df.driver_race == 'Hispanic']\n",
    "print(100*df3.search_conducted.dropna().astype(int).mean(), 100*df3.search_conducted.dropna().astype(int).std())\n",
    "print(100*df3.contraband_found.dropna().astype(int).mean(), 100*df3.contraband_found.dropna().astype(int).std())\n",
    "print(100*len(df3[df3.stop_outcome=='Citation'])/len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.248882362067784"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[(df.driver_race_original == 'White') & (df.driver_race == 'Hispanic')]) / len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25633"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[(df.driver_race_original == 'White') & (df.driver_race == 'Hispanic')])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Finding IDs of cops who had more than 100 stops\n",
    "df_filt = df.groupby(\"officer_id\").count()\n",
    "df_filt['id'] = df_filt.index\n",
    "df_filt.head()\n",
    "ids = np.asarray(df_filt.id[df_filt.state >= 100].astype(str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_search = df[df.search_conducted == True]\n",
    "df_search = df[(df.driver_race == 'Hispanic') | (df.driver_race == 'Black')].groupby(\"officer_id\").count()\n",
    "df_filt['id'] = df_filt.index\n",
    "df_filt.head()\n",
    "ids1 = np.asarray(df_filt.id[df_filt.state >= 20].astype(str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "ids_filt = np.intersect1d(ids,ids1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(171,)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ids_filt.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/rh/anaconda/root/envs/PUI2016_Python3/lib/python3.5/site-packages/pandas/core/generic.py:2701: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self[name] = value\n"
     ]
    }
   ],
   "source": [
    "df.officer_id = df.officer_id.astype(str)\n",
    "df_filt = df[df.officer_id.isin(ids_filt)]\n",
    "df_filt = df[df.search_conducted == True]\n",
    "df_filt.contraband_found = df_filt.contraband_found.fillna(0).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_black_hispanic = df_filt[(df_filt.driver_race == 'Hispanic') | (df_filt.driver_race == 'Black')]\n",
    "df_white = df_filt[(df_filt.driver_race == 'White')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_black_hispanic = df_filt[(df_filt.driver_race == 'Hispanic') | (df_filt.driver_race == 'Black')]\n",
    "df_white = df_filt[(df_filt.driver_race == 'White')]\n",
    "\n",
    "df_b_h_GB = df_black_hispanic.groupby('officer_id').count()\n",
    "df_white_GB = df_white.groupby('officer_id').count()\n",
    "\n",
    "df_b_h_GB['MinoritySearches'] = df_b_h_GB.id\n",
    "df_b_h_GB = pd.DataFrame(df_b_h_GB['MinoritySearches'])\n",
    "df_white_GB['WhiteSearches'] = df_white_GB.id\n",
    "df_white_GB = pd.DataFrame(df_white_GB.WhiteSearches)\n",
    "\n",
    "df_search = pd.merge(df_b_h_GB, df_white_GB, left_index=True, right_index=True)\n",
    "\n",
    "df_search[\"MinorityWhiteSearchRatio\"] = df_search.MinoritySearches/df_search.WhiteSearches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4589041095890411"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_search[df_search.MinorityWhiteSearchRatio > 2])/len(df_search)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.21232876712328766"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_search[df_search.MinorityWhiteSearchRatio > 3])/len(df_search)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1095890410958904"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_search[df_search.MinorityWhiteSearchRatio > 4])/len(df_search)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 17.,  48.,  39.,  16.,  12.,   4.,   3.,   2.,   1.,   3.]),\n",
       " array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD8CAYAAABn919SAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAADKZJREFUeJzt3X+onYV9x/H3Z4lia1fUeZXM6K6D\n4JSBOi7iJoxO2+GWUv2jDktXwgjkn26zW6FL+88Y7I8Io+3+GGNBXQNzVrGWiJa2kiplMGyvP7Zq\nU4lzmc3MzHXV1e6PdWm/++M+jmBves79ce7J/d73C+Sc57nPyfM9Jnnnuc85z7mpKiRJG9/PTHsA\nSdLaMOiS1IRBl6QmDLokNWHQJakJgy5JTRh0SWpi6zgbJTkKvAn8CDhZVXNJLgDuB2aBo8DvVNXr\nkxlTkjTKco7Qf6OqrqmquWF5L3CoqnYAh4ZlSdKUZJwrRYcj9Lmqeu2UdS8A76mq40m2AU9U1RU/\n7de58MILa3Z2dnUTS9Im89RTT71WVTOjthvrlAtQwFeTFPA3VbUfuLiqjgMMUb9o1C8yOzvL/Pz8\nmLuUJAEk+bdxths36DdU1StDtB9L8p1lDLIH2ANw2WWXjfswSdIyjXUOvapeGW5PAF8ErgNeHU61\nMNyeOM1j91fVXFXNzcyM/I5BkrRCI4Oe5NwkP/vWfeA3geeAh4Fdw2a7gIOTGlKSNNo4p1wuBr6Y\n5K3t/76qvpzkm8ADSXYDLwO3TW5MSdIoI4NeVS8BVy+x/j+BmyYxlCRp+bxSVJKaMOiS1IRBl6Qm\nDLokNTHuhUWb1uzeR6e276P7dk5t35I2Ho/QJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYM\nuiQ1YdAlqQmDLklNGHRJasKgS1ITBl2SmjDoktSEQZekJgy6JDVh0CWpCYMuSU0YdElqwqBLUhMG\nXZKaMOiS1IRBl6QmDLokNWHQJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUxNhBT7IlyTNJHhmWL0/y\nZJIjSe5PcvbkxpQkjbKcI/Q7gMOnLN8JfKaqdgCvA7vXcjBJ0vKMFfQk24GdwF3DcoAbgQeHTQ4A\nt05iQEnSeMY9Qv8s8Angx8PyzwFvVNXJYfkYcMlSD0yyJ8l8kvmFhYVVDStJOr2RQU/yfuBEVT11\n6uolNq2lHl9V+6tqrqrmZmZmVjimJGmUrWNscwPwgSS/DZwDvJvFI/bzkmwdjtK3A69MbkxJ0igj\nj9Cr6pNVtb2qZoHbga9V1YeBx4EPDpvtAg5ObEpJ0kireR/6nwB/nORFFs+p3702I0mSVmKcUy7/\nr6qeAJ4Y7r8EXLf2I+kts3sfncp+j+7bOZX9SlodrxSVpCYMuiQ1YdAlqQmDLklNGHRJasKgS1IT\nBl2SmjDoktSEQZekJgy6JDVh0CWpCYMuSU0YdElqwqBLUhMGXZKaMOiS1IRBl6QmDLokNWHQJakJ\ngy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYMuiQ1YdAlqQmDLklNGHRJasKgS1ITBl2SmjDoktSE\nQZekJgy6JDUxMuhJzknyjST/lOT5JH82rL88yZNJjiS5P8nZkx9XknQ64xyh/w9wY1VdDVwD3Jzk\neuBO4DNVtQN4Hdg9uTElSaOMDHot+sGweNbwXwE3Ag8O6w8At05kQknSWMY6h55kS5JngRPAY8C/\nAG9U1clhk2PAJad57J4k80nmFxYW1mJmSdISxgp6Vf2oqq4BtgPXAVcutdlpHru/quaqam5mZmbl\nk0qSfqplvculqt4AngCuB85LsnX40nbglbUdTZK0HOO8y2UmyXnD/XcA7wUOA48DHxw22wUcnNSQ\nkqTRto7ehG3AgSRbWPwH4IGqeiTJt4HPJ/lz4Bng7gnOKUkaYWTQq+qfgWuXWP8Si+fTJUlnAK8U\nlaQmDLokNWHQJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYMuiQ1YdAlqQmDLklNGHRJasKg\nS1ITBl2SmjDoktSEQZekJgy6JDVh0CWpCYMuSU0YdElqwqBLUhMGXZKaMOiS1IRBl6QmDLokNWHQ\nJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYMuiQ1MTLoSS5N8niSw0meT3LHsP6CJI8lOTLc\nnj/5cSVJpzPOEfpJ4ONVdSVwPfDRJFcBe4FDVbUDODQsS5KmZGTQq+p4VT093H8TOAxcAtwCHBg2\nOwDcOqkhJUmjLescepJZ4FrgSeDiqjoOi9EHLlrr4SRJ4xs76EneBXwB+FhVfX8Zj9uTZD7J/MLC\nwkpmlCSNYaygJzmLxZjfW1UPDatfTbJt+Po24MRSj62q/VU1V1VzMzMzazGzJGkJ47zLJcDdwOGq\n+vQpX3oY2DXc3wUcXPvxJEnj2jrGNjcAHwG+leTZYd2ngH3AA0l2Ay8Dt01mREnSOEYGvar+Achp\nvnzT2o4jSVoprxSVpCYMuiQ1YdAlqQmDLklNGHRJasKgS1ITBl2SmhjnwqIzwuzeR6c9giSd0TxC\nl6QmDLokNWHQJakJgy5JTWyYF0W1fqb5AvTRfTuntm9po/MIXZKaMOiS1IRBl6QmDLokNWHQJakJ\ngy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYMuiQ1YdAlqQmDLklNGHRJasKgS1IT/oALnVGm9cM1\n/MEa6sAjdElqwqBLUhMGXZKaMOiS1MTIoCe5J8mJJM+dsu6CJI8lOTLcnj/ZMSVJo4xzhP454Oa3\nrdsLHKqqHcChYVmSNEUjg15VXwe+97bVtwAHhvsHgFvXeC5J0jKt9Bz6xVV1HGC4vWjtRpIkrcTE\nXxRNsifJfJL5hYWFSe9OkjatlQb91STbAIbbE6fbsKr2V9VcVc3NzMyscHeSpFFWGvSHgV3D/V3A\nwbUZR5K0UuO8bfE+4B+BK5IcS7Ib2Ae8L8kR4H3DsiRpikZ+OFdVfeg0X7ppjWeRJK2CV4pKUhMG\nXZKaMOiS1IRBl6QmDLokNWHQJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYMuiQ1YdAlqQmD\nLklNGHRJasKgS1ITBl2SmjDoktSEQZekJgy6JDWxddoDSGeC2b2PTm3fR/ftnNq+1YtH6JLUhEGX\npCYMuiQ14Tl0acqmdf5+M5677/7/2iN0SWrCoEtSEwZdkprwHLq0Sfne+348QpekJgy6JDVh0CWp\nCc+hS1p30zx/39mqjtCT3JzkhSQvJtm7VkNJkpZvxUFPsgX4K+C3gKuADyW5aq0GkyQtz2qO0K8D\nXqyql6rqh8DngVvWZixJ0nKtJuiXAN89ZfnYsE6SNAWreVE0S6yrn9go2QPsGRZ/kOSFFe7vQuC1\nFT52o/I5bw4+5+Zy56qf7y+Ms9Fqgn4MuPSU5e3AK2/fqKr2A/tXsR8AksxX1dxqf52NxOe8Ofic\n+1uv57uaUy7fBHYkuTzJ2cDtwMNrM5YkablWfIReVSeT/D7wFWALcE9VPb9mk0mSlmVVFxZV1ZeA\nL63RLKOs+rTNBuRz3hx8zv2ty/NN1U+8jilJ2oD8LBdJamJDBH0zfcRAkkuTPJ7kcJLnk9wx7ZnW\nS5ItSZ5J8si0Z1kPSc5L8mCS7wy/37867ZkmLckfDX+un0tyX5Jzpj3TWktyT5ITSZ47Zd0FSR5L\ncmS4PX8S+z7jg74JP2LgJPDxqroSuB74aPPne6o7gMPTHmId/SXw5ar6JeBqmj/3JJcAfwjMVdUv\ns/hmitunO9VEfA64+W3r9gKHqmoHcGhYXnNnfNDZZB8xUFXHq+rp4f6bLP4lb38FbpLtwE7grmnP\nsh6SvBv4deBugKr6YVW9Md2p1sVW4B1JtgLvZIlrVza6qvo68L23rb4FODDcPwDcOol9b4Sgb9qP\nGEgyC1wLPDndSdbFZ4FPAD+e9iDr5BeBBeBvh9NMdyU5d9pDTVJV/TvwF8DLwHHgv6rqq9Odat1c\nXFXHYfGgDbhoEjvZCEEf6yMGuknyLuALwMeq6vvTnmeSkrwfOFFVT017lnW0FfgV4K+r6lrgv5nQ\nt+FniuG88S3A5cDPA+cm+d3pTtXLRgj6WB8x0EmSs1iM+b1V9dC051kHNwAfSHKUxVNqNyb5u+mO\nNHHHgGNV9dZ3Xw+yGPjO3gv8a1UtVNX/Ag8BvzblmdbLq0m2AQy3Jyaxk40Q9E31EQNJwuJ51cNV\n9elpz7MequqTVbW9qmZZ/P39WlW1PnKrqv8AvpvkimHVTcC3pzjSengZuD7JO4c/5zfR/IXgUzwM\n7Bru7wIOTmInZ/yPoNuEHzFwA/AR4FtJnh3WfWq4Kle9/AFw73Cg8hLwe1OeZ6Kq6skkDwJPs/hu\nrmdoeMVokvuA9wAXJjkG/CmwD3ggyW4W/2G7bSL79kpRSephI5xykSSNwaBLUhMGXZKaMOiS1IRB\nl6QmDLokNWHQJakJgy5JTfwfrIbsstBVg4QAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f2c5c8d4198>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df_search.MinorityWhiteSearchRatio, bins=[0,1,2,3,4,5,6,7,8,9,10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([  17.,   65.,  104.,  120.,  132.,  136.,  139.,  141.,  142.,  145.]),\n",
       " array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n+1893ppu+Za6LAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f2c5cb8c748>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df_search.MinorityWhiteSearchRatio, bins=[0,1,2,3,4,5,6,7,8,9,10], cumulative=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df_b_h_C_GB = pd.DataFrame(df_black_hispanic.groupby('officer_id')['contraband_found'].sum())\n",
    "df_white_C_GB = pd.DataFrame(df_white.groupby('officer_id')['contraband_found'].sum())\n",
    "df_white_C_GB['WhiteContrabandRecovered'] = df_white_C_GB.contraband_found\n",
    "df_b_h_C_GB['MinorityContrabandRecovered'] = df_b_h_C_GB.contraband_found\n",
    "df_contraband = pd.merge(df_b_h_C_GB, df_white_C_GB, left_index=True, right_index=True)\n",
    "\n",
    "df_contraband[\"MinorityWhiteContrabandRatio\"] = df_contraband.MinorityContrabandRecovered/df_contraband.WhiteContrabandRecovered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_contraband_search = pd.merge(df_contraband, df_search, left_index=True, right_index=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Statesman Methodology\n",
    "\n",
    "To compare search rates by race, we looked at individual troopers who had at least 100 stops and 20 searches of either black or Hispanic motorists, and then compared the number of searches to stops to get a search rate for that race. We did the same for their stops of white motorists, and then divided the rates to get a ratio of minority stops. For contraband hit rates, we compared the number of positive contraband results to the total number of searches by race for each trooper. DPS misidentified many Hispanic motorists as Anglo during the period studied, meaning the paper’s conclusions are most likely conservative.\n",
    "\n",
    "35 percent of the 1,138 troopers included in the analysis searched black and Hispanic motorists at least twice as often as white drivers.\n",
    "\n",
    "231 of the officers who searched black and Hispanic motorists at two times or more the rate at which they searched white drivers were less likely to find contraband while searching the minority drivers.\n",
    "\n",
    "65 DPS officers searched minority drivers at least three times more often than the white motorists they stopped yet found contraband less often.\n",
    "\n",
    "16 officers searched minority motorists more than four times as often as Anglos, with lower contraband hit rates."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Our Version of Their Stats\n",
    "To compare search rates by race, we looked at individual troopers who had at least 100 stops and 20 searches of either black or Hispanic motorists, and then compared the number of searches to stops to get a search rate for that race. We did the same for their stops of white motorists, and then divided the rates to get a ratio of minority stops. For contraband hit rates, we compared the number of positive contraband results to the total number of searches by race for each trooper. DPS misidentified many Hispanic motorists as Anglo during the period studied, meaning the paper’s conclusions are most likely conservative.\n",
    "\n",
    "46 percent of the 146 troopers included in the analysis searched black and Hispanic motorists at least twice as often as white drivers.\n",
    "\n",
    "31 of the officers who searched black and Hispanic motorists at two times or more the rate at which they searched white drivers were less likely to find contraband while searching the minority drivers (46% of the 46% above).\n",
    "\n",
    "31 DPS officers searched minority drivers at least three times more often than the white motorists they stopped, 12 found contraband less often (39%)\n",
    "\n",
    "16 officers searched minority motorists more than four times as often as Anglos, 5 with lower contraband hit rates (30%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_contraband_search['MinorityHitRate'] = df_contraband_search.MinorityContrabandRecovered/df_contraband_search.MinoritySearches\n",
    "df_contraband_search['WhiteHitRate'] = df_contraband_search.WhiteContrabandRecovered/df_contraband_search.WhiteSearches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_contraband_search['HitRateDiff'] = df_contraband_search['WhiteHitRate'] - df_contraband_search.MinorityHitRate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4626865671641791 0.3870967741935484 0.3125\n"
     ]
    }
   ],
   "source": [
    "df_contraband_search_2 = df_contraband_search[df_contraband_search.MinorityWhiteSearchRatio > 2]\n",
    "df_contraband_search_3 = df_contraband_search[df_contraband_search.MinorityWhiteSearchRatio > 3]\n",
    "df_contraband_search_4 = df_contraband_search[df_contraband_search.MinorityWhiteSearchRatio > 4]\n",
    "print(len(df_contraband_search_2[df_contraband_search_2.HitRateDiff > 0])/len(df_contraband_search_2),\\\n",
    "len(df_contraband_search_3[df_contraband_search_3.HitRateDiff > 0])/len(df_contraband_search_3),\\\n",
    "len(df_contraband_search_4[df_contraband_search_4.HitRateDiff > 0])/len(df_contraband_search_4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31 12 5\n"
     ]
    }
   ],
   "source": [
    "print(len(df_contraband_search_2[df_contraband_search_2.HitRateDiff > 0]),\\\n",
    "     len(df_contraband_search_3[df_contraband_search_3.HitRateDiff > 0]),\\\n",
    "    len(df_contraband_search_4[df_contraband_search_4.HitRateDiff > 0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16\n"
     ]
    }
   ],
   "source": [
    "print(len(df_contraband_search_4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/rh/anaconda/root/envs/PUI2016_Python3/lib/python3.5/site-packages/IPython/core/interactiveshell.py:2717: DtypeWarning: Columns (17,20,25) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv(\"tx_stops_2010_2015.csv\", encoding=\"ISO-8859-1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'id', 'state', 'stop_date', 'stop_time', 'location_raw',\n",
       "       'county_name', 'county_fips', 'fine_grained_location',\n",
       "       'police_department', 'driver_gender', 'driver_age_raw', 'driver_age',\n",
       "       'driver_race_raw', 'driver_race', 'violation_raw', 'violation',\n",
       "       'search_conducted', 'search_type_raw', 'search_type',\n",
       "       'contraband_found', 'stop_outcome', 'is_arrested', 'lat', 'lon',\n",
       "       'officer_id', 'driver_race_original'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Baseline Stats: State of Texas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.76948522792 13.1839849984\n"
     ]
    }
   ],
   "source": [
    "print(100*df.search_conducted.dropna().astype(int).mean(), 100*df.search_conducted.dropna().astype(int).std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.587484717392 7.64220771071\n"
     ]
    }
   ],
   "source": [
    "print(100*df.contraband_found.dropna().astype(int).mean(), 100*df.contraband_found.dropna().astype(int).std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34.729283014772655"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.stop_outcome=='Citation'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "67.4918435792735"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_gender=='M'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "53.37713011139592"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race=='White'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.90348849368814"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race=='Black'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "31.786152825037725"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race=='Hispanic'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.7003698104447464"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race=='Asian'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2551228503038512"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race=='Other'])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.9777359091296214"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[df.driver_race.isnull()])/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Stats on Searches and Contraband Recovered, % Citations by Race"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.34642613114 11.5251799182\n",
      "0.528881690792 7.25316910683\n",
      "30.55700394481766\n"
     ]
    }
   ],
   "source": [
    "df1 = df[df.driver_race == 'White']\n",
    "print(100*df1.search_conducted.dropna().astype(int).mean(), 100*df1.search_conducted.dropna().astype(int).std())\n",
    "print(100*df1.contraband_found.dropna().astype(int).mean(), 100*df1.contraband_found.dropna().astype(int).std())\n",
    "print(100*len(df1[df1.stop_outcome=='Citation'])/len(df1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.1007358078 17.3337615892\n",
      "1.18047440355 10.8006493498\n",
      "38.31587999651659\n"
     ]
    }
   ],
   "source": [
    "df2 = df[df.driver_race == 'Black']\n",
    "print(100*df2.search_conducted.dropna().astype(int).mean(), 100*df2.search_conducted.dropna().astype(int).std())\n",
    "print(100*df2.contraband_found.dropna().astype(int).mean(), 100*df2.contraband_found.dropna().astype(int).std())\n",
    "print(100*len(df2[df2.stop_outcome=='Citation'])/len(df2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.10554522428 14.3569237652\n",
      "0.512212715968 7.13855196343\n",
      "12.937588962392603\n"
     ]
    }
   ],
   "source": [
    "df3 = df[df.driver_race == 'Hispanic']\n",
    "print(100*df3.search_conducted.dropna().astype(int).mean(), 100*df3.search_conducted.dropna().astype(int).std())\n",
    "print(100*df3.contraband_found.dropna().astype(int).mean(), 100*df3.contraband_found.dropna().astype(int).std())\n",
    "print(100*len(df3[df3.stop_outcome=='Citation'])/len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15.710780993230863"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*len(df[(df.driver_race_original == 'White') & (df.driver_race == 'Hispanic')]) / len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1748784"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[(df.driver_race_original == 'White') & (df.driver_race == 'Hispanic')])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Finding IDs of cops who had more than 100 stops\n",
    "df_filt = df.groupby(\"officer_id\").count()\n",
    "df_filt['id'] = df_filt.index\n",
    "df_filt.head()\n",
    "ids = np.asarray(df_filt.id[df_filt.state >= 100].astype(str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_search = df[df.search_conducted == True]\n",
    "df_search = df[(df.driver_race == 'Hispanic') | (df.driver_race == 'Black')].groupby(\"officer_id\").count()\n",
    "df_filt['id'] = df_filt.index\n",
    "df_filt.head()\n",
    "ids1 = np.asarray(df_filt.id[df_filt.state >= 20].astype(str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "ids_filt = np.intersect1d(ids,ids1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4072,)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ids_filt.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/rh/anaconda/root/envs/PUI2016_Python3/lib/python3.5/site-packages/pandas/core/generic.py:2701: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self[name] = value\n"
     ]
    }
   ],
   "source": [
    "df.officer_id = df.officer_id.astype(str)\n",
    "df_filt = df[df.officer_id.isin(ids_filt)]\n",
    "df_filt = df[df.search_conducted == True]\n",
    "df_filt.contraband_found = df_filt.contraband_found.fillna(0).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_black_hispanic = df_filt[(df_filt.driver_race == 'Hispanic') | (df_filt.driver_race == 'Black')]\n",
    "df_white = df_filt[(df_filt.driver_race == 'White')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_black_hispanic = df_filt[(df_filt.driver_race == 'Hispanic') | (df_filt.driver_race == 'Black')]\n",
    "df_white = df_filt[(df_filt.driver_race == 'White')]\n",
    "\n",
    "df_b_h_GB = df_black_hispanic.groupby('officer_id').count()\n",
    "df_white_GB = df_white.groupby('officer_id').count()\n",
    "\n",
    "df_b_h_GB['MinoritySearches'] = df_b_h_GB.id\n",
    "df_b_h_GB = pd.DataFrame(df_b_h_GB['MinoritySearches'])\n",
    "df_white_GB['WhiteSearches'] = df_white_GB.id\n",
    "df_white_GB = pd.DataFrame(df_white_GB.WhiteSearches)\n",
    "\n",
    "df_search = pd.merge(df_b_h_GB, df_white_GB, left_index=True, right_index=True)\n",
    "\n",
    "df_search[\"MinorityWhiteSearchRatio\"] = df_search.MinoritySearches/df_search.WhiteSearches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2974408498309995"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_search[df_search.MinorityWhiteSearchRatio > 2])/len(df_search)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.19097054563013038"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_search[df_search.MinorityWhiteSearchRatio > 3])/len(df_search)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.13954611298889424"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_search[df_search.MinorityWhiteSearchRatio > 4])/len(df_search)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 1510.,  1195.,   528.,   243.,   162.,   114.,    65.,    39.,\n",
       "           41.,    44.]),\n",
       " array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f2c58363438>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df_search.MinorityWhiteSearchRatio, bins=[0,1,2,3,4,5,6,7,8,9,10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 1510.,  2705.,  3233.,  3476.,  3638.,  3752.,  3817.,  3856.,\n",
       "         3897.,  3941.]),\n",
       " array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f2c67a636a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df_search.MinorityWhiteSearchRatio, bins=[0,1,2,3,4,5,6,7,8,9,10], cumulative=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df_b_h_C_GB = pd.DataFrame(df_black_hispanic.groupby('officer_id')['contraband_found'].sum())\n",
    "df_white_C_GB = pd.DataFrame(df_white.groupby('officer_id')['contraband_found'].sum())\n",
    "df_white_C_GB['WhiteContrabandRecovered'] = df_white_C_GB.contraband_found\n",
    "df_b_h_C_GB['MinorityContrabandRecovered'] = df_b_h_C_GB.contraband_found\n",
    "df_contraband = pd.merge(df_b_h_C_GB, df_white_C_GB, left_index=True, right_index=True)\n",
    "\n",
    "df_contraband[\"MinorityWhiteContrabandRatio\"] = df_contraband.MinorityContrabandRecovered/df_contraband.WhiteContrabandRecovered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_contraband_search = pd.merge(df_contraband, df_search, left_index=True, right_index=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Statesman Methodology\n",
    "\n",
    "To compare search rates by race, we looked at individual troopers who had at least 100 stops and 20 searches of either black or Hispanic motorists, and then compared the number of searches to stops to get a search rate for that race. We did the same for their stops of white motorists, and then divided the rates to get a ratio of minority stops. For contraband hit rates, we compared the number of positive contraband results to the total number of searches by race for each trooper. DPS misidentified many Hispanic motorists as Anglo during the period studied, meaning the paper’s conclusions are most likely conservative.\n",
    "\n",
    "35 percent of the 1,138 troopers included in the analysis searched black and Hispanic motorists at least twice as often as white drivers.\n",
    "\n",
    "231 of the officers who searched black and Hispanic motorists at two times or more the rate at which they searched white drivers were less likely to find contraband while searching the minority drivers.\n",
    "\n",
    "65 DPS officers searched minority drivers at least three times more often than the white motorists they stopped yet found contraband less often.\n",
    "\n",
    "16 officers searched minority motorists more than four times as often as Anglos, with lower contraband hit rates."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Our Version of Their Stats\n",
    "To compare search rates by race, we looked at individual troopers who had at least 100 stops and 20 searches of either black or Hispanic motorists, and then compared the number of searches to stops to get a search rate for that race. We did the same for their stops of white motorists, and then divided the rates to get a ratio of minority stops. For contraband hit rates, we compared the number of positive contraband results to the total number of searches by race for each trooper. DPS misidentified many Hispanic motorists as Anglo during the period studied, meaning the paper’s conclusions are most likely conservative.\n",
    "\n",
    "30 percent of the 4142 troopers included in the analysis searched black and Hispanic motorists at least twice as often as white drivers.\n",
    "\n",
    "567 of the officers who searched black and Hispanic motorists at two times or more the rate at which they searched white drivers were less likely to find contraband while searching the minority drivers (46% of the 30% above).\n",
    "\n",
    "791 DPS officers searched minority drivers at least three times more often than the white motorists they stopped, 319 found contraband less often (40%)\n",
    "\n",
    "578 officers searched minority motorists more than four times as often as Anglos, 223 with lower contraband hit rates (38%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_contraband_search['MinorityHitRate'] = df_contraband_search.MinorityContrabandRecovered/df_contraband_search.MinoritySearches\n",
    "df_contraband_search['WhiteHitRate'] = df_contraband_search.WhiteContrabandRecovered/df_contraband_search.WhiteSearches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_contraband_search['HitRateDiff'] = df_contraband_search['WhiteHitRate'] - df_contraband_search.MinorityHitRate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4602272727272727 0.40328697850821743 0.38581314878892736\n"
     ]
    }
   ],
   "source": [
    "df_contraband_search_2 = df_contraband_search[df_contraband_search.MinorityWhiteSearchRatio > 2]\n",
    "df_contraband_search_3 = df_contraband_search[df_contraband_search.MinorityWhiteSearchRatio > 3]\n",
    "df_contraband_search_4 = df_contraband_search[df_contraband_search.MinorityWhiteSearchRatio > 4]\n",
    "print(len(df_contraband_search_2[df_contraband_search_2.HitRateDiff > 0])/len(df_contraband_search_2),\\\n",
    "len(df_contraband_search_3[df_contraband_search_3.HitRateDiff > 0])/len(df_contraband_search_3),\\\n",
    "len(df_contraband_search_4[df_contraband_search_4.HitRateDiff > 0])/len(df_contraband_search_4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "567 319 223\n"
     ]
    }
   ],
   "source": [
    "print(len(df_contraband_search_2[df_contraband_search_2.HitRateDiff > 0]),\\\n",
    "     len(df_contraband_search_3[df_contraband_search_3.HitRateDiff > 0]),\\\n",
    "    len(df_contraband_search_4[df_contraband_search_4.HitRateDiff > 0]))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "PUI2016_Python3",
   "language": "python",
   "name": "pui2016_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
